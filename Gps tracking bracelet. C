#include <WiFi.h>
#include <WebServer.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <HTTPClient.h>
#include <stdlib.h>
#include <time.h>

// ======= OLED Config =======
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// ======= Pins =======
#define SOS_BUTTON 13
#define BUZZER 25
#define STATUS_LED 2

// ======= Wi-Fi Config =======
const char* ssid = "STARK";
const char* password = "12345678";

// ======= Web Server =======
WebServer server(80);

// ======= Medical Theme Colors =======
#define MED_BLUE 0x039BE5
#define MED_RED 0xFF5252
#define MED_GREEN 0x4CAF50
#define MED_WHITE 0xFFFFFF

// ======= Variables =======
bool sosActive = false;
String liveAddress = "Fetching location...";
double latitude = 11.9416;  // Base latitude (Pondicherry)
double longitude = 79.8083; // Base longitude (Pondicherry)
String patientID = "PT-2024-001";
String lastUpdateTime = "--:--:--";

void setup() {
  Serial.begin(115200);
  srand(time(NULL));

  pinMode(SOS_BUTTON, INPUT_PULLUP);
  pinMode(BUZZER, OUTPUT);
  pinMode(STATUS_LED, OUTPUT);

  // OLED init
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED not found");
    for(;;);
  }
  display.clearDisplay();
  displayMedicalSplash();
  delay(2000);

  // WiFi connect
  display.clearDisplay();
  displayConnectingScreen();
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  // Web routes
  server.on("/", handleRoot);
  server.on("/deactivate", handleDeactivate);
  server.on("/gps", handleGPSData);
  server.on("/style.css", handleCSS);
  server.begin();

  displayMainScreen();
  digitalWrite(STATUS_LED, HIGH);
}

void loop() {
  server.handleClient();

  // Simulate GPS updates with small random variations
  static unsigned long lastUpdate = 0;
  if (millis() - lastUpdate > 5000) {
    lastUpdate = millis();
    
    // Generate small random offsets
    double latOffset = (rand() % 1000 - 500) / 1000000.0;
    double lngOffset = (rand() % 1000 - 500) / 1000000.0;
    
    latitude = 11.9416 + latOffset;
    longitude = 79.8083 + lngOffset;
    
    getAddressFromGPS(latitude, longitude);
    
    // Update time
    updateTimeString();
    
    Serial.print("Simulated Location: ");
    Serial.print(latitude, 6);
    Serial.print(", ");
    Serial.println(longitude, 6);

    // Update OLED display
    displayMainScreen();
  }

  if (digitalRead(SOS_BUTTON) == LOW && !sosActive) {
    sosActive = true;
    Serial.println("SOS Triggered!");
    displayAlertScreen();
    digitalWrite(BUZZER, HIGH);
    digitalWrite(STATUS_LED, LOW);
    delay(100);
    digitalWrite(STATUS_LED, HIGH);
  }

  if (sosActive) {
    digitalWrite(BUZZER, millis() % 1000 < 500); // Beep pattern
    digitalWrite(STATUS_LED, millis() % 500 < 250); // Blink pattern
  } else {
    digitalWrite(BUZZER, LOW);
    digitalWrite(STATUS_LED, HIGH);
  }
}

// ======= Display Functions =======
void displayMedicalSplash() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);
  display.println(F("MEDICAL"));
  display.setCursor(30, 30);
  display.println(F("ALERT"));
  display.setTextSize(1);
  display.setCursor(20, 50);
  display.println(F("Emergency System"));
  display.display();
}

void displayConnectingScreen() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Connecting to WiFi..."));
  display.drawRect(0, 15, 128, 10, SSD1306_WHITE);
  for (int i=0; i<5; i++) {
    display.fillRect(5 + i*25, 17, 15, 6, SSD1306_WHITE);
    display.display();
    delay(300);
  }
}

void displayMainScreen() {
  display.clearDisplay();
  
  // Header
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("MEDICAL MONITOR"));
  
  // Patient ID
  display.setCursor(0, 10);
  display.print(F("Patient: "));
  display.println(patientID);
  
  // Status indicator
  display.setCursor(0, 20);
  display.print(F("Status: "));
  if (sosActive) {
    display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
    display.println(F(" EMERGENCY "));
    display.setTextColor(SSD1306_WHITE);
  } else {
    display.println(F("Normal"));
  }
  
  // Location data
  display.setCursor(0, 30);
  display.println(F("Location:"));
  display.setCursor(0, 40);
  display.print(latitude, 6);
  display.print(F(","));
  display.setCursor(0, 50);
  display.println(longitude, 6);
  
  // Time
  display.setCursor(70, 10);
  display.println(lastUpdateTime);
  
  display.display();
}

void displayAlertScreen() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(15, 10);
  display.println(F("EMERGENCY"));
  display.setTextSize(1);
  display.setCursor(10, 35);
  display.println(F("Alert sent to:"));
  display.setCursor(10, 45);
  display.println(F("Hospital Network"));
  display.display();
}

// ======= Web Handlers =======
void handleRoot() {
  String html = "<!DOCTYPE html><html><head>";
  html += "<title>Medical Emergency System</title>";
  html += "<link rel='stylesheet' href='/style.css'>";
  html += "<meta http-equiv='refresh' content='5'>";
  html += "</head><body>";
  html += "<div class='header'>";
  html += "<div class='hospital-logo'>‚öï</div>";
  html += "<h1>Medical Emergency Alert System</h1>";
  html += "</div>";
  
  html += "<div class='patient-info'>";
  html += "<h2>Patient: " + patientID + "</h2>";
  html += "<div class='status " + String(sosActive ? "emergency" : "normal") + "'>";
  html += "Status: " + String(sosActive ? "EMERGENCY" : "Normal");
  html += "</div>";
  html += "</div>";
  
  html += "<div class='data-card'>";
  html += "<h3><span class='icon'>üìç</span> Current Location</h3>";
  html += "<p>" + String(latitude, 6) + ", " + String(longitude, 6) + "</p>";
  html += "<p>" + liveAddress + "</p>";
  html += "<p>Last update: " + lastUpdateTime + "</p>";
  html += "</div>";
  
  if (sosActive) {
    html += "<div class='emergency-alert'>";
    html += "<h2>üö® EMERGENCY ALERT ACTIVE  </h2>";
    html += "<p>Emergency services have been notified</p>";
    html += "<a href='/deactivate' class='emergency-button'>Deactivate Alert</a>";
    html += "</div>";
  } else {
    html += "<div class='normal-message'>";
    html += "<p>System operating normally</p>";
    html += "<p>Press SOS button in case of emergency</p>";
    html += "</div>";
  }
  
  html += "<div class='footer'>";
  html += "<p>¬© 2024 Medical Alert System</p>";
  html += "</div>";
  html += "</body></html>";
  
  server.send(200, "text/html", html);
}

void handleCSS() {
  String css = F(
    "body { font-family: 'Segoe UI', Arial, sans-serif; margin: 0; padding: 0; background: #f5f5f5; color: #333; }"
    ".header { background: #039BE5; color: white; padding: 20px; text-align: center; position: relative; }"
    ".hospital-logo { font-size: 40px; margin-bottom: 10px; }"
    "h1 { margin: 0; font-weight: 300; }"
    ".patient-info { background: white; margin: 20px; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }"
    ".status { display: inline-block; padding: 5px 10px; border-radius: 4px; font-weight: bold; }"
    ".normal { background: #4CAF50; color: white; }"
    ".emergency { background: #FF5252; color: white; }"
    ".data-card { background: white; margin: 20px; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }"
    ".data-card h3 { color: #039BE5; margin-top: 0; }"
    ".icon { margin-right: 10px; }"
    ".emergency-alert { background: #FFEBEE; border-left: 5px solid #FF5252; margin: 20px; padding: 15px; border-radius: 0 8px 8px 0; }"
    ".emergency-button { display: inline-block; background: #FF5252; color: white; padding: 10px 20px; border-radius: 4px; text-decoration: none; font-weight: bold; }"
    ".normal-message { text-align: center; color: #666; margin: 40px 20px; }"
    ".footer { text-align: center; color: #666; padding: 20px; font-size: 12px; }"
  );
  
  server.send(200, "text/css", css);
}

void handleDeactivate() {
  sosActive = false;
  displayMainScreen();
  digitalWrite(BUZZER, LOW);
  digitalWrite(STATUS_LED, HIGH);
  server.sendHeader("Location", "/");
  server.send(303);
}

void handleGPSData() {
  String gpsJson = "{\"lat\":" + String(latitude, 6) + ",\"lng\":" + String(longitude, 6) + ",\"address\":\"" + liveAddress + "\",\"status\":\"" + (sosActive ? "emergency" : "normal") + "\"}";
  server.send(200, "application/json", gpsJson);
}

// ======= Helper Functions =======
void getAddressFromGPS(double lat, double lng) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "https://nominatim.openstreetmap.org/reverse?format=json&lat=" + String(lat, 6) + "&lon=" + String(lng, 6) + "&zoom=18&addressdetails=1";
    http.begin(url);
    http.setUserAgent("MedicalAlertSystem/1.0");
    int httpCode = http.GET();
    if (httpCode == 200) {
      String payload = http.getString();
      int addrIndex = payload.indexOf("\"display_name\":\"");
      if (addrIndex != -1) {
        int start = addrIndex + 16;
        int end = payload.indexOf("\",", start);
        liveAddress = payload.substring(start, end);
      }
    }
    http.end();
  }
}

void updateTimeString() {
  unsigned long seconds = millis() / 1000;
  int h = (seconds / 3600) % 24;
  int m = (seconds / 60) % 60;143
  int s = seconds % 60;
  lastUpdateTime = String(h) + ":" + (m < 10 ? "0" : "") + String(m) + ":" + (s < 10 ? "0" : "") + String(s);
}
